package domain.usecase

import data.repository.WeatherRepositoryImpl
import domain.model.WeatherInfo
import domain.model.WeekForecast
import domain.repository.WeatherRepository

/**
 * üå§Ô∏è Use Case para obtener clima actual
 */
class GetWeatherUseCase(private val repository: WeatherRepository) {

    suspend fun byLocation(lat: Double, lon: Double): Result<WeatherInfo> {
        return repository.getWeatherByLocation(lat, lon)
    }

    suspend fun byCity(cityName: String): Result<WeatherInfo> {
        return repository.getWeatherByCity(cityName)
    }
}

/**
 * üìÖ Use Case para obtener pron√≥stico de 5 d√≠as
 */
class GetForecastUseCase(private val repository: WeatherRepository) {

    suspend fun byLocation(lat: Double, lon: Double): Result<WeekForecast> {
        return repository.getForecastByLocation(lat, lon)
    }

    suspend fun byCity(cityName: String): Result<WeekForecast> {
        return repository.getForecastByCity(cityName)
    }
}

/**
 * üöÄ Use Case para obtener clima completo (actual + pron√≥stico)
 */
class GetCompleteWeatherUseCase(private val repository: WeatherRepository) {

    suspend fun byLocation(lat: Double, lon: Double): Result<WeekForecast> {
        return repository.getCompleteWeatherByLocation(lat, lon)
    }

    suspend fun byCity(cityName: String): Result<WeekForecast> {
        return repository.getCompleteWeatherByCity(cityName)
    }
}